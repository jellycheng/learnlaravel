

workspace
├─app
│  ├─Models                         // 数据模型
│  │                                // php artisan make:model --no-migration
│  │
│  ├─Commands                       // 命令 用来放置应用程序的命
│  │      Command.php               // php artisan make:command
│  │
│  ├─Console                        // 命令行
│  │  │  Kernel.php
│  │  │
│  │  └─Commands                    // php artisan make:console
│  │
│  ├─Events                         // 用来放置事件类
│  │      Event.php                 // php artisan make:event
│  │
│  ├─Exceptions                     // 异常处理
│  │      Handler.php
│  │
│  ├─Handlers                       // 命令/事件处理 包含命令和事件的处理类。处理进程接收命令或事件，并针对该命令或事件执行逻辑
│  │  ├─Commands                    // php artisan handler:command
│  │  └─Events                      // php artisan handler:event
│  │
│  ├─Http
│  │  │  Kernel.php
│  │  │  routes.php
│  │  │
│  │  ├─Controllers                 // 控制器
│  │  │      Controller.php         // php artisan make:controller
│  │  │
│  │  ├─Middleware                  // 中间件
│  │  │      VerifyCsrfToken.php    // php artisan make:middleware
│  │  │
│  │  └─Requests                    // 表单验证
│  │          Request.php           // php artisan make:request
│  │
│  ├─Providers                      // 服务注册
│  │
│  └─Services                       // 服务实体,目录包含各种「辅助」服务，囊括应用程序需要的功能
│
|- database 数据库迁移与数据填充文件
├─config                            // 配置文件位置, 可以根据配置需要自行在这里新增文件
│  │ app.php
│  │ database.php
│  │ session.php
│  
├─resources
│  └─lang
│      └─zh-cn                      // 语言文件, 语言翻译/错误信息翻译
│
└─storage                           // 临时目录, 无需关心，目录包含编译后的 Blade 模板、基于文件的 session、文件缓存和其他框架产生的文件，该目录一定要可读可写
│─public                           //web 入口，项目web入口和静态资源文件 (图片、js、css，字体等等)
│  │ index.php
|- vendor 目录包含你的Composer代码 及 依赖模块及laravel框架
|- bootstrap 目录包含几个框架启动跟自动加载配置的文件。
		|- app.php   laravel初始化,返回app对象
		|- autoload.php  是加载composer加载器
|- tests 自动化测试目录
|- resources 目录包含视图、原始的资源文件 (LESS、SASS、CoffeeScript) 和「语言」文件。
	|- views 视图模板目录
	|- lang 语言包目录
	|- assets
		|- less
	|- storage 目录包含编译后的 Blade 模板、基于文件的 session、文件缓存和其他框架产生的文件，该目录一定要可读可写。
	

字符串处理: https://github.com/danielstjules/Stringy

自动加载文件:
    "src/Illuminate/Foundation/helpers.php",
    "src/Illuminate/Support/helpers.php"
    src/Illuminate\Support\Arr.php
    src/Illuminate\Support\Str.php
    src/Illuminate\Support\Collection.php

目录思想：
	1. Illuminate\Contracts\目录下的代码都是接口 ，按业务和功能模块区分子目录 ，如 Illuminate\Contracts\Foundation\Application接口

服务提供者思想：
	1. 服务提供者基类： Illuminate\Support\ServiceProvider 且构造方法上接收app对象
	2. 所有服务提供者子类继承 Illuminate\Support\ServiceProvider并实现register()方法, 也可以实现boot()方法，但boot方法一般用于注册监听事件listen
	3. 使用命令生成服务提供者： php artisan make:provider XxxServiceProvider
	4. 服务提供者类一般在： App/Providers/ 目录下
	5. 典型的服务提供者： 事件服务提供者Illuminate\Events\EventServiceProvider， 路由服务提供者Illuminate\Routing\RoutingServiceProvider
	6. app启动时就注入服务提供者，可以在config/app.php文件中配置'providers' => ['App\Providers\AppServiceProvider服务提供者类', ‘其它服务提供者类’],
	7. 服务器提供者对象在app对象serviceProviders属性中=['服务器提供者类名1'=>'对象'，'服务器提供者类名1'=>'对象']

$app是app对象： $app['abc']等价$app->make('abc');等价$app->不存在的属性  ＝》返回instances['abc']属性值
	$app['abc'] = 123；等价 $app->bind('abc'，function(){return 123;}, false); 等价 $app->不存在的属性 ＝ 123；
$app对象->singleton('events', function($app){}); 等价调用 $app对象->bind('events', function($app){}, true);

限制范围内: 捆绑，实例，别名
public function bound($abstract){
	return isset($this->bindings[$abstract]) || isset($this->instances[$abstract]) || $this->isAlias($abstract);
}

/**
 * 已解决
 * 是否是instances属性key或resolved属性key
 */
public function resolved($abstract){
	return isset($this->resolved[$abstract]) || isset($this->instances[$abstract]);
}

/**
 * $name是否有别名
 */
public function isAlias($name){
	return isset($this->aliases[$name]);
}

build（）－》make（）
bind（）

