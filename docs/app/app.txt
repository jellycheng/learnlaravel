
$this->app['url']
$this->app['router']
$this->app['redirect']
 $this->app['config']
	$config = $this->app['config']->get($key, []);
$this->app['view']
$this->app['translator']
$this->app['events']



$this->app['router'] = xxx;等价 app对象->router=xxx; 等价app对象->offsetSet('router', 'xxx')方法,等价app对象->bind(‘router’, 闭包返回‘xxx’, false);方法
$a = $this->app['router'];等价app->offsetGet('router')方法 等价app对象->make(router, $parameters = array())方法,等价app对象->router

$app->singleton('Illuminate\Contracts\Http\Kernel', 'App\Http\Kernel' );
    等价
app对象->bind($abstract'Illuminate\Contracts\Http\Kernel', $concrete'App\Http\Kernel', true);
  其实是设置app对象->bindings[$abstract] = compact('concrete', 'shared');

$app对象->bindings['Illuminate\Contracts\Http\Kernel'] =array('concrete'=>function(对象，参数){}, 'shared'=>true )
    =》如果执行concrete闭包是(对象，参数)则实际上调用对象->make|build('App\Http\Kernel', 参数);

$this->app->singleton('Illuminate\Contracts\Routing\ResponseFactory', function($app){
										return new ResponseFactory($app['Illuminate\Contracts\View\Factory'], $app['redirect']);
									});
$this->app->singleton('events', function($app) {
			return (new Dispatcher($app))->setQueueResolver(function() use ($app) { return $app->make('Illuminate\Contracts\Queue\Queue'); });
		     });

app类重要的属性：
#别名
$this->aliases = ['真实的类'=>'别名代号', '真实的接口'=>'别名代号',字符串=>别名, 'Illuminate\\Foundation\\Application'=>'app'];
$this->resolved = [];
$this->bindings = [
                    $abstract=>['concrete'=>function(对象1, 参数1){对象1->make(xyz,参数1)}, 'shared'=>true],
                    $abstract2=>['concrete'=>function(对象){ }, 'shared'=>true ],
                    $abstract3=>['concrete'=>function(对象){ }, 'shared'=>false ],
                    ];
$this->instances = ['代号如path'=>'值'，'代号2'=>对象];
$this->loadedProviders['provider类名'] = true;
$this->serviceProviders[]=服务提供者对象
$this->deferredServices = ['$abstract'=>'',]
$this->bootingCallbacks[] = 闭包
$this->bootedCallbacks[] =
$this->terminatingCallbacks[]=
$this->extenders[$abstract][]=闭包



